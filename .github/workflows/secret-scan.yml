---
name: Security Scan

on:
  pull_request:
    branches: ["main"]
  push:
    branches-ignore: ["main"]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

jobs:
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch full history for better secret detection
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          base: main
          head: HEAD
          path: .
          extra_args: --debug --only-verified

  onepassword-secret-validation:
    name: 1Password Secret Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install 1Password CLI
        uses: 1password/install-cli-action@v1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install PyYAML
        run: |
          python -m pip install --upgrade pip
          pip install PyYAML

      - name: Validate 1Password Secret References
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
        run: |
          python3 << 'EOF'
          import yaml
          import re
          import os
          import subprocess
          import sys

          def find_onepassword_lookups(file_path):
              """Find 1Password lookups in YAML files"""
              try:
                  with open(file_path, 'r') as f:
                      content = f.read()

                  # Pattern to match 1Password lookups
                  pattern = (r"lookup\(\s*['\"]community\.general\."
                            r"onepassword['\"],\s*['\"]([^'\"]+)['\"].*?"
                            r"vault\s*=\s*['\"]([^'\"]+)['\"]")
                  matches = re.findall(pattern, content)

                  return [(item, vault) for item, vault in matches]
              except Exception as e:
                  print(f"Error reading {file_path}: {e}")
                  return []

          def validate_onepassword_reference(item, vault):
              """Validate that a 1Password reference exists"""
              try:
                  # Check if OP_SERVICE_ACCOUNT_TOKEN is available
                  if not os.getenv('OP_SERVICE_ACCOUNT_TOKEN'):
                      warning_msg = ("Warning: OP_SERVICE_ACCOUNT_TOKEN "
                                   "not available, skipping validation")
                      print(warning_msg)
                      return True

                  # Try to get the item from 1Password
                  cmd = ['op', 'item', 'get', item, '--vault', vault,
                         '--format', 'json']
                  result = subprocess.run(cmd, capture_output=True, text=True)

                  if result.returncode == 0:
                      msg = (f"✓ 1Password reference valid: '{item}' "
                            f"in vault '{vault}'")
                      print(msg)
                      return True
                  else:
                      error_msg = result.stderr.strip()
                      msg = (f"✗ 1Password reference invalid: '{item}' "
                            f"in vault '{vault}' - {error_msg}")
                      print(msg)
                      return False
              except Exception as e:
                  error_msg = (f"Error validating 1Password reference "
                              f"'{item}' in vault '{vault}': {e}")
                  print(error_msg)
                  return False

          def check_hardcoded_secrets(file_path):
              """Check for potential hardcoded secrets in files"""
              try:
                  with open(file_path, 'r') as f:
                      content = f.read()

                  # Patterns for common secret formats
                  secret_patterns = [
                      (r'password\s*:\s*["\'][^"\']{8,}["\']',
                       'Potential hardcoded password'),
                      (r'token\s*:\s*["\'][A-Za-z0-9+/]{20,}["\']',
                       'Potential hardcoded token'),
                      (r'key\s*:\s*["\'][A-Za-z0-9+/]{20,}["\']',
                       'Potential hardcoded key'),
                      (r'secret\s*:\s*["\'][A-Za-z0-9+/]{20,}["\']',
                       'Potential hardcoded secret'),
                  ]

                  issues = []
                  for pattern, description in secret_patterns:
                      matches = re.finditer(pattern, content, re.IGNORECASE)
                      for match in matches:
                          # Skip if it's a 1Password lookup
                          if 'lookup(' in match.group(0):
                              continue
                          issues.append(f"{description}: {match.group(0)}")

                  return issues
              except Exception as e:
                  print(f"Error checking {file_path}: {e}")
                  return []

          # Find all YAML files
          yaml_files = []
          for root, dirs, files in os.walk('.'):
              # Skip .git directory
              if '.git' in root:
                  continue
              for file in files:
                  if file.endswith(('.yml', '.yaml')):
                      yaml_files.append(os.path.join(root, file))

          file_count = len(yaml_files)
          print(f"Scanning {file_count} YAML files for 1Password "
                f"references and secrets...")

          validation_failed = False

          for yaml_file in yaml_files:
              print(f"\nScanning: {yaml_file}")

              # Check for hardcoded secrets
              secret_issues = check_hardcoded_secrets(yaml_file)
              if secret_issues:
                  print(f"⚠️  Potential security issues in {yaml_file}:")
                  for issue in secret_issues:
                      print(f"    {issue}")
                  validation_failed = True

              # Validate 1Password lookups
              lookups = find_onepassword_lookups(yaml_file)
              if lookups:
                  lookup_count = len(lookups)
                  print(f"Found {lookup_count} 1Password lookup(s):")
                  for item, vault in lookups:
                      if not validate_onepassword_reference(item, vault):
                          validation_failed = True

          if validation_failed:
              print("\n❌ Secret validation failed!")
              sys.exit(1)
          else:
              print("\n✅ All secret validations passed!")
          EOF

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
          queries: security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:python"
