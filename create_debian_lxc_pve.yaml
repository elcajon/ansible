---
- name: Proxmox Server erstellen
  hosts: localhost
  gather_facts: false

  vars:
    proxmox_host: "{{ lookup('community.general.onepassword', 'Proxmox API' , field='Host-Name', vault='CI') }}"
    proxmox_user: "{{ lookup('community.general.onepassword', 'Proxmox API' , field='Benutzername', vault='CI') }}"
    proxmox_token_id: "{{ lookup('community.general.onepassword', 'Proxmox API' , field='TokenID', vault='CI') }}"
    proxmox_token_secret: "{{ lookup('community.general.onepassword', 'Proxmox API' , field='Anmeldedaten', vault='CI') }}"
    mba_pubkey: "{{ lookup('community.general.onepassword', 'MBA SSH - Public Key' , field='Benutzername', vault='CI') }}"

  vars_prompt:
    - name: server_name
      prompt: Name des zu erstellenden Servers eingeben
      private: false
      default: "docker"

    - name: lxc_pw
      prompt: Passwort für den root User eingeben
      private: true

    - name: network_ip_mask
      prompt: IP-Adresse und Netzmaske des Servers eingeben (z.B. 192.168.0.10/24)
      private: false
      default: "10.10.0.5/23"

    - name: network_gateway
      prompt: Gateway des Servers eingeben (z.B. 192.168.0.1)
      private: false
      default: "10.10.0.1"

    - name: network_dns
      prompt: DNS-Server des Servers eingeben (z.B.192.168.0.1)
      private: false
      default: "10.10.0.1"

    - name: docker
      prompt: Docker installiert? [True/False]
      private: false
      default: True

    - name: backrest
      prompt: Backrest installiert? [True/False]
      private: false
      default: True

    - name: tailscale
      prompt: Tailscale installiert? [True/False]
      private: false
      default: True

    - name: newt
      prompt: Newt installiert? [True/False]
      private: false
      default: False

  tasks:
    - name: Lesen Tailscale Node Informationen zu Servernamen
      command: "tailscale ip -4 {{ server_name }} "
      register: tailscale_info
      failed_when: false

    - name: Speichern der Tailscale IP zur weiteren Verwendung
      set_fact:
        tailscale_ip: "{{ tailscale_info.stdout }}"

    - name: Server IP speichern
      set_fact:
        server_ip: "{{ network_ip_mask.split('/')[0] }}"

    - name: Neuen LXC Server erstellen
      community.proxmox.proxmox:
        node: proxmox
        api_user: "{{ proxmox_user }}"
        api_host: "{{ proxmox_host }}"
        api_port: 8006
        validate_certs: false
        api_token_id: "{{ proxmox_token_id }}"
        api_token_secret: "{{ proxmox_token_secret }}"
        pubkey: "{{ mba_pubkey }}"
        cpus: 1
        cores: 16
        memory: 8192
        swap: 8192
        disk: "local:256"
        netif:
          net0: "name=eth0,gw={{ network_gateway }},ip={{ network_ip_mask }},bridge=vmbr0"
        nameserver: "{{ network_dns }}"
        onboot: 1
        hostname: "{{ server_name }}"
        password: "{{ lxc_pw }}"
        ostemplate: "local:vztmpl/debian-12-standard_12.7-1_amd64.tar.zst"
        timezone: host
        unprivileged: true
        features:
          - nesting=1
      register: lxc_info
      when: tailscale_ip == ""
    - name: "VMID des neuen Servers speichern"
      set_fact:
        vmid: "{{ lxc_info.vmid }}"
      when: tailscale_ip == ""

    - name: Änderung der VM Datei auf Server (Bypass für root privilege)
      shell: |
        ssh root@{{ proxmox_host }} "
          sed -i -e '
            s/^features:.*/features: keyctl=1,nesting=1/
          ' /etc/pve/lxc/{{ vmid }}.conf
        "
      when: tailscale_ip == "" and docker == "True"

    - name: Anhängen von Tailscale Konfiguration an LXC {{ vmid }}.conf
      shell: |
        ssh root@{{ proxmox_host }} "echo -e 'lxc.cgroup2.devices.allow: c 10:200 rwm\nlxc.mount.entry: /dev/net/tun dev/net/tun none bind,create=file' >> /etc/pve/lxc/{{ vmid }}.conf"
      when: tailscale_ip == "" and tailscale == "True"

    - name: Neuen LXC Server starten
      community.proxmox.proxmox:
        node: proxmox
        api_user: "{{ proxmox_user }}"
        api_host: "{{ proxmox_host }}"
        api_port: 8006
        validate_certs: false
        api_token_id: "{{ proxmox_token_id }}"
        api_token_secret: "{{ proxmox_token_secret }}"
        vmid: "{{ vmid }}"
        state: started
      when: tailscale_ip == ""

    - name: Neu erzeugten Server in dynamisches Hostfile aufnehmen
      add_host:
        name: "{{ server_ip }}"
        groups: hetzner_single
        ansible_user: root
        server_name: "{{ server_name }}"
        docker: "{{ docker }}"
        backrest: "{{ backrest }}"
        tailscale: "{{ tailscale }}"
        newt: "{{ newt }}"
      when: tailscale_ip == ""

    - name: Tailscale IP in dynamisches Hostfile aufnehmen
      add_host:
        name: "{{ tailscale_ip }}"
        groups: hetzner_single
        ansible_user: root
        server_name: "{{ server_name }}"
        docker: "{{ docker }}"
        backrest: "{{ backrest }}"
        tailscale: "{{ tailscale }}"
        newt: "{{ newt }}"
      when: tailscale_ip != ""

    - name: Auf Start des neuen Servers warten
      wait_for:
        timeout: 120
        port: 22
        host: "{{ server_ip }}"
      when: tailscale_ip == ""

    - name: PermitRootLogin in sshd_config im LXC-Container anpassen (Workaround)
      shell: |
        ssh root@{{ proxmox_host }} "
        lxc-attach -n {{ vmid }} -- sed -i 's/^#PermitRootLogin.*/PermitRootLogin prohibit-password/' /etc/ssh/sshd_config
        "
      when: tailscale_ip == ""

    - name: SSH Service im LXC-Container neu starten (Workaround)
      shell: |
        ssh root@{{ proxmox_host }} "
        lxc-attach -n {{ vmid }} -- systemctl restart ssh
        "
      when: tailscale_ip == ""

- name: Server mit custom Skript aufsetzen
  hosts: hetzner_single
  gather_facts: true

  vars:
    tailscale_token: "{{ lookup('community.general.onepassword', 'Tailscale Token' , field='Anmeldedaten', vault='CI') }}"
    ansible_python_interpreter: /usr/bin/python3

  tasks:
    - name: Check if tailscale is installed and running
      ansible.builtin.shell: pgrep tailscaled
      register: tailscale_running
      failed_when: false
      changed_when: false

    - name: Install and run Tailscale
      include_role:
        name: artis3n.tailscale.machine
      vars:
        tailscale_authkey: "{{ tailscale_token }}"
        tailscale_args: "--ssh --accept-dns=false --accept-routes=false --advertise-exit-node"
      when: tailscale_running.rc != 0 and tailscale == True

    - name: Run Server Setup
      include_role:
        name: server-setup
