#SPDX-License-Identifier: MIT-0
---
# tasks file for server-setup
- name: System aktualisieren und bereinigen
  apt:
    update_cache: yes
    upgrade: yes
    autoremove: yes
    autoclean: yes

- name: Benötigte Pakete installieren
  apt:
    name:
      - jq
      - curl
      - htop
      - gnupg2
      - unattended-upgrades
      - apt-listchanges
      - sudo
      - wget
      - git
      - zsh
    state: present

- name: SSH Hardening
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  loop:
    - { regexp: '^#?PermitRootLogin.*', line: 'PermitRootLogin prohibit-password' }
    - { regexp: '^#AddressFamily any', line: 'AddressFamily inet' }
    - { regexp: '^#PasswordAuthentication yes', line: 'PasswordAuthentication no' }

- name: SSH neu starten
  systemd:
    name: sshd
    state: restarted
  ignore_errors: true

- name: SSH deaktivieren (Login nur über Tailscale)
  systemd:
    name: ssh
    state: stopped
    enabled: false

- name: ZSH als Standard-Shell setzen
  user:
    name: root
    shell: /usr/bin/zsh

- name: Oh-My-Zsh installieren (root)
  shell: |
    rm -rf /root/.oh-my-zsh
    wget -q https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | zsh
  args:
    creates: /root/.oh-my-zsh

- name: ZSH Theme anpassen
  lineinfile:
    path: /root/.zshrc
    regexp: '^ZSH_THEME="robbyrussell"'
    line: 'ZSH_THEME="maran"'

- name: ZSH Aliases und Updates
  blockinfile:
    path: /root/.zshrc
    block: |
      alias update='apt update && apt upgrade -y && apt dist-upgrade -y && apt autoclean -y && apt autoremove -y && apt purge -y'
      ZSH_THEME="maran"
      zstyle ':omz:update' mode auto
      zstyle ':omz:update' verbose minimal

- name: IPv4 & IPv6 Forwarding aktivieren
  sysctl:
    name: "{{ item }}"
    value: 1
    sysctl_set: yes
    state: present
    reload: yes
  loop:
    - net.ipv4.ip_forward
    - net.ipv6.conf.all.forwarding

- name: Unattended-Upgrades Konfiguration kopieren
  template:
    src: files/50unattended-upgrades
    dest: /etc/apt/apt.conf.d/50unattended-upgrades
    owner: root
    group: root
    mode: '0755'

- name: Unattended-Upgrades aktivieren
  debconf:
    name: unattended-upgrades
    question: unattended-upgrades/enable_auto_updates
    value: "true"
    vtype: boolean

- name: Unattended-Upgrades konfigurieren
  command: dpkg-reconfigure -f noninteractive unattended-upgrades

- name: Backrest herunterladen und installieren
  shell: |
    curl -s https://api.github.com/repos/garethgeorge/backrest/releases/latest | \
      grep "browser_download_url" | grep "Linux_arm64.tar.gz" | cut -d '"' -f 4 | xargs curl -LO
    tar -xzf backrest_Linux_arm64.tar.gz -C /tmp
    rm backrest_Linux_arm64.tar.gz
    /tmp/install.sh
  args:
    creates: /usr/local/bin/backrest

- name: Erstelle GUID-Strings
  set_fact:
    guid1: "{{ lookup('pipe', 'python3 -c \"import secrets; print(secrets.token_hex(32))\"') }}"
    guid2: "{{ lookup('pipe', 'python3 -c \"import secrets; print(secrets.token_hex(32))\"') }}"

- name: Backrest Konfigurationsverzeichnis erstellen
  ansible.builtin.file:
    path: /root/.config/backrest
    state: directory
    mode: '0755'

- name: Backrest Konfiguration aus Template erzeugen
  ansible.builtin.template:
    src: templates/config.json.j2
    dest: /root/.config/backrest/config.json
    force: false

- name: Wrapper-Skript für Backrest kopieren
  template:
    src: files/backrest-wrapper.sh
    dest: /usr/local/bin/backrest-wrapper.sh
    owner: root
    group: root
    mode: '0755'

- name: Systemd Service Datei für Backrest kopieren
  template:
    src: files/backrest.service
    dest: /etc/systemd/system/backrest.service
    owner: root
    group: root
    mode: 0644
  notify:
    - Reload systemd
    - Restart backrest


- name: Zeitzone setzen
  timezone:
    name: "{{ timezone }}"

- name: HTOP Config Verzeichnis erstellen
  ansible.builtin.file:
    path: /root/.config/htop
    state: directory
    mode: '0755'

- name: Systemd Service Datei für Backrest kopieren
  template:
    src: files/htoprc
    dest: /root/.config/htop/htoprc
    owner: root
    group: root
    mode: 0644

- name: Docker installieren
  shell: |
    curl -fsSL https://get.docker.com -o get-docker.sh
    sh get-docker.sh
    rm get-docker.sh
  args:
    creates: /usr/bin/docker
  when: docker == True

- name: RCLONE installieren
  shell: |
    curl https://rclone.org/install.sh | bash
  args:
    creates: /usr/bin/rclone

- name: RCLONE Config Verzeichnis erstellen
  ansible.builtin.file:
    path: /root/.config/rclone
    state: directory
    mode: '0755'

- name: RCLONE-Konfiguration anlegen
  copy:
    dest: /root/.config/rclone/rclone.conf
    content: "{{ rclone_config }}"

- name: Aufräumen diverser Dateien
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - /etc/motd
    - /root/.cloud-locale-test.skip
    - /root/.bashrc
    - /root/.profile
    - /root/.wget-hsts
