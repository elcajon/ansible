{
  "modno": 10,
  "version": 4,
  "instance": "{{ backrest_server_name }}",
  "repos": [
    {
      "id": "onedrive",
      "uri": "rclone:onedrive:Anwendungen/backrest/{{ backrest_server_name }}",
      "guid": "{{ guid1 }}",
      "password": "{{ backrest_repo_password }}",
      "prunePolicy": {
        "schedule": {
          "cron": "0 2 * * *",
          "clock": "CLOCK_LOCAL"
        },
        "maxUnusedPercent": 10
      },
      "checkPolicy": {
        "schedule": {
          "cron": "0 1 * * *",
          "clock": "CLOCK_LOCAL"
        },
        "readDataSubsetPercent": 25
      },
      "commandPrefix": {}
    },
    {
      "id": "s3-elcajon",
      "uri": "s3:fsn1.your-objectstorage.com/elcajon/{{ backrest_server_name }}",
      "guid": "{{ guid2 }}",
      "password": "{{ backrest_repo_password }}",
      "env": [
        "AWS_ACCESS_KEY_ID={{ AWS_ACCESS_KEY_ID }}",
        "AWS_SECRET_ACCESS_KEY={{ AWS_SECRET_ACCESS_KEY }}"
      ],
      "prunePolicy": {
        "schedule": {
          "cron": "0 0 * * *",
          "clock": "CLOCK_LOCAL"
        },
        "maxUnusedPercent": 10
      },
      "checkPolicy": {
        "schedule": {
          "cron": "0 1 * * *",
          "clock": "CLOCK_LOCAL"
        },
        "readDataSubsetPercent": 25
      },
      "commandPrefix": {}
    }
  ],
  "plans": [
    {
      "id": "full-backup",
      "repo": "onedrive",
      "paths": [
        "/root/.config/backrest",
        "/root/.config/rclone",
        "/srv"
      ],
      "excludes": [
        "*.log",
        "*.log.gz"
      ],
      "schedule": {
        "cron": "0 4 * * *",
        "clock": "CLOCK_LOCAL"
      },
      "retention": {
        "policyTimeBucketed": {
          "hourly": 24,
          "daily": 30,
          "monthly": 12
        }
      },
      "hooks": [
      {% if install_docker == True %}
        {
          "conditions": [
            "CONDITION_SNAPSHOT_START"
          ],
          "actionCommand": {
            "command": "#!/bin/bash\nif ping -q -c 1 -W 1 google.com >/dev/null; then\n  echo \"Internet connection is up\"\n  exit 0\nelse\n  echo \"Internet connection is down\"\n  exit 1\nfi\n"
          }
        },
        {
          "conditions": [
            "CONDITION_SNAPSHOT_START"
          ],
          "onError": "ON_ERROR_RETRY_1MINUTE",
          "actionCommand": {
            "command": "#!/bin/bash\n\nBASE_DIR=\"/srv\"\n\nfor dir in \"$BASE_DIR\"/*/ ; do\n  # Prüft auf Compose-Dateien\n  if [ -f \"${dir}docker-compose.yml\" ] || \\\n     [ -f \"${dir}docker-compose.yaml\" ] || \\\n     [ -f \"${dir}compose.yml\" ] || \\\n     [ -f \"${dir}compose.yaml\" ]; then\n    echo \"Führe 'docker compose down' in $dir aus...\"\n    (cd \"$dir\" && docker compose down)\n  else\n    echo \"Keine Compose-Datei in $dir gefunden, überspringe...\"\n  fi\ndone"
          }
        },
        {
          "conditions": [
            "CONDITION_SNAPSHOT_END"
          ],
          "onError": "ON_ERROR_RETRY_1MINUTE",
          "actionCommand": {
            "command": "#!/bin/bash\n\nBASE_DIR=\"/srv\"\n\n# alle Stacks starten\nfor dir in \"$BASE_DIR\"/*/ ; do\n  if [ -f \"${dir}docker-compose.yml\" ] || \\\n     [ -f \"${dir}compose.yml\" ] || \\\n     [ -f \"${dir}compose.yaml\" ]; then\n\n    # Nach .env-Dateien suchen (erste gefundene nehmen)\n    env_file=\"\"\n    for file in \"$dir\"*.env; do\n      if [[ -f $file ]]; then\n        env_file=\"$file\"\n        break\n      fi\n    done\n\n    echo \"Starte Stack in $dir ...\"\n    if [[ -n \"$env_file\" ]]; then\n      echo \"Nutze Umgebungsdatei $env_file\"\n      (cd \"$dir\" && docker compose --env-file=\"$env_file\" up -d)\n    else\n      (cd \"$dir\" && docker compose up -d)\n    fi\n  fi\ndone"
          }
        }
      {% endif %}
      ]
    },
    {
      "id": "full-backup-s3",
      "repo": "s3-elcajon",
      "paths": [
        "/root/.config/backrest",
        "/root/.config/rclone",
        "/srv"
      ],
      "excludes": [
        "*.log",
        "*.log.gz"
      ],
      "schedule": {
        "cron": "30 4 * * *",
        "clock": "CLOCK_LOCAL"
      },
      "retention": {
        "policyTimeBucketed": {
          "hourly": 24,
          "daily": 30,
          "monthly": 12
        }
      },
      "hooks": [
      {% if install_docker == True %}
        {
          "conditions": [
            "CONDITION_SNAPSHOT_START"
          ],
          "actionCommand": {
            "command": "#!/bin/bash\nif ping -q -c 1 -W 1 google.com >/dev/null; then\n  echo \"Internet connection is up\"\n  exit 0\nelse\n  echo \"Internet connection is down\"\n  exit 1\nfi\n"
          }
        },
        {
          "conditions": [
            "CONDITION_SNAPSHOT_START"
          ],
          "onError": "ON_ERROR_RETRY_1MINUTE",
          "actionCommand": {
            "command": "#!/bin/bash\n\nBASE_DIR=\"/srv\"\n\nfor dir in \"$BASE_DIR\"/*/ ; do\n  # Prüft auf Compose-Dateien\n  if [ -f \"${dir}docker-compose.yml\" ] || \\\n     [ -f \"${dir}docker-compose.yaml\" ] || \\\n     [ -f \"${dir}compose.yml\" ] || \\\n     [ -f \"${dir}compose.yaml\" ]; then\n    echo \"Führe 'docker compose down' in $dir aus...\"\n    (cd \"$dir\" && docker compose down)\n  else\n    echo \"Keine Compose-Datei in $dir gefunden, überspringe...\"\n  fi\ndone\n"
          }
        },
        {
          "conditions": [
            "CONDITION_SNAPSHOT_END"
          ],
          "onError": "ON_ERROR_RETRY_1MINUTE",
          "actionCommand": {
            "command": "#!/bin/bash\n\nBASE_DIR=\"/srv\"\n\n# alle Stacks starten\nfor dir in \"$BASE_DIR\"/*/ ; do\n  if [ -f \"${dir}docker-compose.yml\" ] || \\\n     [ -f \"${dir}compose.yml\" ] || \\\n     [ -f \"${dir}compose.yaml\" ]; then\n\n    # Nach .env-Dateien suchen (erste gefundene nehmen)\n    env_file=\"\"\n    for file in \"$dir\"*.env; do\n      if [[ -f $file ]]; then\n        env_file=\"$file\"\n        break\n      fi\n    done\n\n    echo \"Starte Stack in $dir ...\"\n    if [[ -n \"$env_file\" ]]; then\n      echo \"Nutze Umgebungsdatei $env_file\"\n      (cd \"$dir\" && docker compose --env-file=\"$env_file\" up -d)\n    else\n      (cd \"$dir\" && docker compose up -d)\n    fi\n  fi\ndone\n"
          }
        }
      {% endif %}
      ]
    }
  ],
  "auth": {
    "disabled": true
  }
}
